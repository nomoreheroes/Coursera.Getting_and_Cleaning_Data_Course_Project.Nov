q()
q()
x = 1:10
y = rnorm(10,5,4)
x
y
plot(x,y,xlab="Ширина",ylab="Высота",main="Слоны")
q()
q()
library(swirl)
library("swirl"")
library("swirl)
library("swirl")
swirl()
library(swirl)
install.packages("swirl")
?read.csv
u = url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","r")
data = read.csv(u)
data
d = read.csv(u)
u = url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","r")
d = read.csv(u)
d
names(d)
nead(d$VAL)
head(d$VAL)
head(d)
sum(d$VAL == 24)
sum(d$VAL == 24 $ !is.na(d$VAL))
val = d$VAL[!is.na(d$VAL)]
class(val)
length(val)
sum(val == 24)
val==24
length(val[val==24])
head(d$FES)
head(d$FES,20)
library(xlsx)
??package
??package
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
library(xlsl)
library(xlsx)
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
?xml
??xml
install.packages(c("jpeg","jsonlite","data.table","httr"))
length(val[val==24])
names(d)
nrow(d)
d2 = d[d$VAL>=24]
d2 = d[d$VAL>=24,]
nrow(d2)
head(d2)
d2 = d[d$VAL>=24 $ !is.na(d$VAL),]
d2 = d[d$VAL>=24,]
d3 = d2[!is.na(d2$VAL)]
d3 = d2[!is.na(d2$VAL),]
nrow(d3)
nrow(d)
sum(d$VAL==24)
sum(d$VAL==24 & !is.na(d$VAL))
sum(d$VAL<24 & !is.na(d$VAL))
sum(d$VAL==25 & !is.na(d$VAL))
sum(d$VAL==23 & !is.na(d$VAL))
sum(d$VAL==22 & !is.na(d$VAL))
sum(d$VAL==21 & !is.na(d$VAL))
sum(d$VAL==20 & !is.na(d$VAL))
sum(d$VAL==24,na.rm=T)
u = url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","r")
d = read.csv(u)
d2 = d[d$VAL>=24 $ !is.na(d$VAL),]
d2 = d[d$VAL>=24,]
sum(d$VAL==24,na.rm=T)
library(data.table)
data.table
install.packages("data.table")
swirl()
library(swirl)
swirl()
?read.csv
mydf = read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran,id_id,package,country)
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(-(X:size))
select(cran,-(X:size))
filter(cran,package="swirl")
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version=="3.0.2",country=="IN")
filter(cran,r_version=="3.0.2",country=="RU")
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="IN"|country=="US")
filter(cran,size > 100500 & r_os=="linux-gnu")
filter(cran,size > 100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2 = select(size:ip_id)
cran2 = select("size":"ip_id")
cran2 = select(size:ip_id)
cran
select(cran,size)
select(cran,size:ip_id)
cran2 <-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
_
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_gb = size_mb/2^10)
mutate(cran3, sie_mb = size/2^20,size_gb = size_mb/2^10)
mutate(cran3, size_mb = size/2^20,size_gb = size_mb/2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran.avg_bytes=mean(size))
summarize(cran,avg_bytes=mean(size))
library(dplyr)
q
quit()
install.packages("rJava")
install.packages("rJava")
install.packages("xlsx")
xlsx
library(xlsx)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
system.time()
system.time(rnorm)
swirl()
library(swirl)
swirl()
swirl()
swirl()
install.packages("rhdf5")
install.packages("rhdf5")
?install.packages
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages("httr")
install.packages("foreign")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "0fef0d859ec602d2897e",
secret = "07b62b4598e630c7c536182b6b3ff4a58dee4848")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
library(httr)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",  key = "0fef0d859ec602d2897e",  secret = "07b62b4598e630c7c536182b6b3ff4a58dee4848")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
?oauth2.0_token
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",  key = "0fef0d859ec602d2897e",  secret = "07b62b4598e630c7c536182b6b3ff4a58dee4848")
myapp
myapp <- oauth_app("github",  key = "0fef0d859ec602d2897e",  secret = "83c782f9296d88c09959038f3e52e54d6058380b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httr")
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",  key = "0fef0d859ec602d2897e",  secret = "83c782f9296d88c09959038f3e52e54d6058380b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
demo("oauth2-github", package = "httr", ask = FALSE)
install.packages("sqldf")
u = url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
library(data.table)
dt = fread(url())
dt = fread(u
)
dt = fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
class(dt)
names(dt)
x1 = sqldf("select distinct AGEP from dt")
library(sqldf)
x1 = sqldf("select distinct AGEP from dt")
x2 = unique(dt$AGEP)
nrow(x1)
nrow(x2)
class(x2)
x2
class(x1)
x1 = x1[[1]]
x1 == x2
u = url("http://biostat.jhsph.edu/~jleek/contact.html")
s = readLines(u)
nchar(s)
class(S)
class(s)
length(s)
s = paste(s,sep="")
nchar(s)
s
s = paste(s,collapse="")
length(s)
nchar(s)
s
s = readLines(u)
nchar(s[c(10,20,30,100)])
library(foreign)
d = read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
d = read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",10,header=TRUE,strip.white=TRUE)
names(D)
names(d)
d = read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3),header=TRUE,strip.white=TRUE)
d = read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3),header=FALSE,strip.white=TRUE)
names(d)
head(d)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
class(d)
names(d)
head(d)
Undebug(ls)
undebug(ls)
rm(list=ls())
tab = read.table(url("https://s3.amazonaws.com/coursera-uploads/user-f898c74fa1ba30b840a1a441/975116/asst-3/6b7e3af05fcc11e5a64e1ded4c98509f.txt"))
tab2 = read.table("C:/Users/Андрей/Google Диск/Projects/coursera/course project 3/tidy.data.txt")
View(tab)
View(tab)
View(tab2)
View(tab2)
tab = read.table(url("https://s3.amazonaws.com/coursera-uploads/user-f898c74fa1ba30b840a1a441/975116/asst-3/6b7e3af05fcc11e5a64e1ded4c98509f.txt"),header=TRUE)
tab2 = read.table("C:/Users/Андрей/Google Диск/Projects/coursera/course project 3/tidy.data.txt",header=TRUE)
View(tab)
View(tab2)
names(tab)
names(tab2)
rm(tab)
tab = read.table("https://s3.amazonaws.com/coursera-uploads/user-91d141917b6988adf178c66f/975116/asst-3/39a090405e6511e5a23b6d223e667636.txt",header=TRUE)
source("C:/Users/Андрей/Google Диск/Projects/coursera/course project 3/UCI HAR Dataset/2.R")
source("C:/Users/Андрей/Google Диск/Projects/coursera/course project 3/2.R")
setwd("C:/Users/Андрей/Google Диск/Projects/coursera/course project 3/UCI HAR Dataset")
source("2.R")
rm)tab
rm(tab)
tab = read.tabl("https://s3.amazonaws.com/coursera-uploads/user-db0e88db3c8996a7c8017439/975116/asst-3/8a0832a05d2e11e5bd2fd3e033ad1749.txt")
tab = read.table("https://s3.amazonaws.com/coursera-uploads/user-db0e88db3c8996a7c8017439/975116/asst-3/8a0832a05d2e11e5bd2fd3e033ad1749.txt",header=TRUE)
View(tab)
tab = read.table("https://s3.amazonaws.com/coursera-uploads/user-9ebd09dd23658f6814724392/975116/asst-3/7b9368805cf111e59b376f172efbdb37.txt",header=TRUE)
View(tab)
rm(list=ls())
library(dplyr)
##read in data and merge training and testing sets
train <- read.table("train/X_train.txt")
train_labels <- read.table("train/y_train.txt")
test <- read.table("test/X_test.txt")
test_labels <- read.table("test/y_test.txt")
all <- rbind(train, test)
all_labels <- rbind(train_labels, test_labels)
##read feature names in as a data frame. Then filter the merged data frame to include
##only the features including the mean and standard deviation for each measurement
features <- read.table("features.txt", sep = " ", stringsAsFactors = FALSE, col.names = c("number", "name"))
index_vec1 <- grep("mean[^a-zA-Z]", features$name)
index_vec2 <- grep("std[^a-zA-Z]", features$name)
index_vec <- sort(c(index_vec1, index_vec2))
all = all[,index_vec]
##create a new dataframe that includes a description of the activity, as well as labeled features
all_labels <- rename(all_labels, activity = V1)
all_labels$activity <- factor(all_labels$activity,
labels = c("WALKING", "WALKING_UPSTAIRS", "WALKING-DOWNSTAIRS", "SITTING", "STANDING", "LAYING"))
tidy_df <- cbind(all_labels, all)
colnames(tidy_df) <- c("activity", features$name[index_vec])
##create separate data frame giving the average of each variable, grouped by activity and subject
subject_train <- read.table("train/subject_train.txt")
subject_test <- read.table("test/subject_test.txt")
subjects <- rbind(subject_train, subject_test)
colnames(subjects) = c("subject")
new_df <- cbind(subjects, tidy_df)
new_df <- aggregate(new_df[,3:68], by = list(new_df$subject, new_df$activity), FUN = mean)
new_df <- rename(new_df, subject = Group.1, activity = Group.2)
##write output to text file
new_df <- apply(new_df, 2, format)
write.table(new_df, file = "tidyDataSet.txt", quote = FALSE, row.names = FALSE)
View(features)
length(index_vec)
filter.for.features = grep(".*mean.*|.*std.*",features)
index_vec
filter.for.features
filter.for.features[[1]]
class(filter.for.features)
length(filter.for.features)
filter.for.features = grep(".*mean.*|.*std.*",read.table("features.txt", sep = " ", stringsAsFactors = FALSE, col.names = c("number", "name")))
length(filter.for.features)
class(filter.for.features)
filter.for.features[[1]]
filter.for.features
filter.for.features = grep(".*mean.*|.*std.*",read.table("features.txt"))
features = as.character(read.table(file.features,header=FALSE)[,2])
features = as.character(read.table("features.txt",header=FALSE)[,2])
filter.for.features = grep(".*mean.*|.*std.*",features)
length(filter.for.features)
a = features[index_vec]
a
b = features(filter.for.features)
b = features[filter.for.features]
length(a)
length(b)
b
